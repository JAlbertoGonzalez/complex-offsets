{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["App","useState","hdkey","fromMasterSeed","Buffer","from","privateExtendedKey","privateKey","setPrivateKey","totalRenters","setTotalRenters","overlap","setOverlap","data","_","times","n","renterIndex","renterPk","fromExtendedKey","deriveChild","nodeId","getNodeId","offset","getQueueOffset","exchangeByteStart","exchangeByteEnd","start","toString","end","id","fluid","Label","Control","value","onChange","e","target","onClick","crypto","randomBytes","type","parseInt","map","row","width","marks","min","max","valueLabelDisplay","aria-labelledby","step","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","key","buffer","publicKey","sha256","createHash","update","digest","Number","isFinite","t","y","p","span","assert","isSafeInteger","Math","pow","ceil"],"mappings":"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","file":"static/js/main.e2825009.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Col, Container, Form, FormGroup, Row } from 'react-bootstrap';\nimport { Slider, Table, TableCell, TableRow } from '@material-ui/core';\nimport hdkey from 'hdkey'\nimport crypto from 'crypto'\nimport _ from 'lodash'\nimport { DataGrid, GridColDef, GridRowData } from '@material-ui/data-grid';\nimport { getNodeId, getQueueOffset } from './utils';\nimport HDNode from 'hdkey';\n\nfunction App() {\n  const [privateKey, setPrivateKey] = useState<string>(hdkey.fromMasterSeed(Buffer.from('1')).privateExtendedKey);\n  const [totalRenters, setTotalRenters] = useState(10);\n  const [overlap, setOverlap] = useState(1);\n\n  const data: GridRowData[] = _.times(totalRenters, (n) => {\n    const renterIndex = n + 1;\n    const complexPk: any = hdkey.fromExtendedKey(privateKey)\n    const renterPk = complexPk.deriveChild(renterIndex);\n    const nodeId = getNodeId(renterPk);\n    const offset = getQueueOffset(totalRenters, overlap);\n    const exchangeByteStart = Buffer.from(nodeId, 'hex')[0] - offset;\n    const exchangeByteEnd = exchangeByteStart + (offset * 2);\n\n    const start = Buffer.from([exchangeByteStart]).toString('hex')\n    const end = Buffer.from([exchangeByteEnd]).toString('hex')\n\n    return {\n      id: n + 1,\n      nodeId: getNodeId(renterPk),\n      offset: offset,\n      exchangeByteStart: start,\n      exchangeByteEnd: end\n    }\n  });\n\n  return (\n    <Container fluid>\n      <Form>\n        <FormGroup>\n          <Form.Label>Complex Private Key</Form.Label>\n          <Form.Control value={privateKey} onChange={(e) => setPrivateKey(e.target.value)}>\n\n          </Form.Control>\n          <Button onClick={() => setPrivateKey(hdkey.fromMasterSeed(crypto.randomBytes(16)).privateExtendedKey)}>Generate a new key</Button>\n        </FormGroup>\n        <Row>\n          <Col>\n\n            <FormGroup>\n              <Form.Label>Total Renters</Form.Label>\n              <Form.Control value={totalRenters} type=\"number\" onChange={(e) => setTotalRenters(parseInt(e.target.value, 10))}>\n\n              </Form.Control>\n            </FormGroup>\n          </Col>\n\n          <Col>\n            <FormGroup>\n              <Form.Label>Overlap</Form.Label>\n              <Form.Control value={overlap} type=\"number\" onChange={(e) => setOverlap(parseInt(e.target.value, 10))}>\n              </Form.Control>\n            </FormGroup>\n          </Col>\n        </Row>\n\n        <Table>\n          {data.map((row) => {\n            return <TableRow>\n\n              <TableCell width={10}>{row.id}</TableCell>\n              <TableCell width={10}>{row.nodeId}</TableCell>\n              <TableCell width={10}>{row.exchangeByteStart}</TableCell>\n              <TableCell width={10}>{row.exchangeByteEnd}</TableCell>\n              <TableCell>\n                <Slider\n                  marks\n                  min={0}\n                  max={256}\n                  valueLabelDisplay=\"auto\"\n                  aria-labelledby=\"range-slider\"\n                  value={[parseInt(Buffer.from(row.exchangeByteStart).toString(), 16), parseInt(Buffer.from(row.exchangeByteEnd).toString(), 16)]}\n                  step={1} />\n              </TableCell>\n\n            </TableRow>\n\n\n          })}\n        </Table>\n\n      </Form>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import HDNode from 'hdkey';\nimport crypto from 'crypto';\nimport assert from 'assert';\n\nexport function getNodeId(key: HDNode) {\n  const buffer = Buffer.from(key.publicKey)\n  const sha256 = crypto.createHash('sha256').update(buffer).digest();\n  return crypto.createHash('ripemd160').update(sha256).digest('hex').toString();\n}\n\nconst _getQueueSpan = function (t: number, y: number, p: number) {\n  assert(Number.isSafeInteger(t) && t > 0, 't is expected to be integer greater than zero');\n  assert(Number.isSafeInteger(y) && y > 0, 'y is expected to be integer greater than zero');\n  assert(Number.isFinite(p) && p > 0 && p < 1, 'p is expected to be number > 0 and < 1');\n\n  var x = (Math.pow((p - 1) / -1, 1 / y) - 1) * -t;\n  return x;\n};\n\nexport function getQueueOffset(totalRenters: number, overlap: number) {\n  if (!Number.isFinite(overlap)) {\n    overlap = 1;\n  }\n\n  const span = _getQueueSpan(\n    256, // total number of queues\n    totalRenters, // total number of renters in pool\n    0.999 // percentage\n  );\n\n  return Math.ceil(span * overlap / 2);\n};\n\n\n"],"sourceRoot":""}